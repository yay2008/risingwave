syntax = "proto3";

package stream_service;

import "common.proto";
import "hummock.proto";
import "stream_plan.proto";

option java_package = "com.risingwave.proto";
option optimize_for = SPEED;

message BuildActorInfo {
  stream_plan.StreamActor actor = 1;
  message SubscriptionIds {
    repeated uint32 subscription_ids = 1;
  }
  map<uint32, SubscriptionIds> related_subscriptions = 2;
}

message InjectBarrierRequest {
  string request_id = 1;
  stream_plan.Barrier barrier = 2;
  repeated uint32 actor_ids_to_collect = 4;
  repeated uint32 table_ids_to_sync = 5;
  uint32 partial_graph_id = 6;
  // Actors in the partial graphs of the creating jobs that need to be pre-synced the barrier mutation to.
  //
  // This is required because in snapshot backfill, the snapshot backfill executor receive barriers from
  // both local barrier manager and upstream. If we don't pre-sync the barrier mutations, when an input executor
  // of an snapshot backfill actor receive a barrier, it will be blocked when trying the fetch the mutation
  // of this upstream barrier. The reason for blocking is that, the snapshot backfill have slower progress,
  // and therefore won't be synced with the mutation of barrier in upstream. To solve this issue of blocking,
  // we specify the set of snapshot backfill actors that needs to be pre-synced with the upstream barrier mutation,
  // so that the input executor won't be blocked at waiting for the mutation of upstream barriers.
  repeated uint32 actor_ids_to_pre_sync_barrier_mutation = 7;

  repeated common.ActorInfo broadcast_info = 8;
  repeated BuildActorInfo actors_to_build = 9;
}

message BarrierCompleteResponse {
  message CreateMviewProgress {
    uint32 backfill_actor_id = 1;
    bool done = 2;
    uint64 consumed_epoch = 3;
    uint64 consumed_rows = 4;
  }
  string request_id = 1;
  common.Status status = 2;
  repeated CreateMviewProgress create_mview_progress = 3;
  message GroupedSstableInfo {
    reserved 1;
    reserved "compaction_group_id";
    hummock.SstableInfo sst = 2;
    map<uint32, hummock.TableStats> table_stats_map = 3;
  }
  repeated GroupedSstableInfo synced_sstables = 4;
  uint32 worker_id = 5;
  map<uint32, hummock.TableWatermarks> table_watermarks = 6;
  repeated hummock.SstableInfo old_value_sstables = 7;
  uint32 partial_graph_id = 8;
  // prev_epoch of barrier
  uint64 epoch = 9;
}

message WaitEpochCommitRequest {
  uint64 epoch = 1;
}

message WaitEpochCommitResponse {
  common.Status status = 1;
}

message StreamingControlStreamRequest {
  message InitRequest {
    uint64 version_id = 1;
  }

  message RemovePartialGraphRequest {
    repeated uint32 partial_graph_ids = 1;
  }

  oneof request {
    InitRequest init = 1;
    InjectBarrierRequest inject_barrier = 2;
    RemovePartialGraphRequest remove_partial_graph = 3;
  }
}

message StreamingControlStreamResponse {
  message InitResponse {}
  message ShutdownResponse {}

  oneof response {
    InitResponse init = 1;
    BarrierCompleteResponse complete_barrier = 2;
    ShutdownResponse shutdown = 3;
  }
}

service StreamService {
  rpc WaitEpochCommit(WaitEpochCommitRequest) returns (WaitEpochCommitResponse);
  rpc StreamingControlStream(stream StreamingControlStreamRequest) returns (stream StreamingControlStreamResponse);
}

// TODO: Lifecycle management for actors.

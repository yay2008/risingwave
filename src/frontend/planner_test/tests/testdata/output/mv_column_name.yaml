# This file is automatically generated. See `src/frontend/planner_test/README.md` for more information.
- name: is_null
  sql: |
    create table t (a int);
    select a is null from t;
  stream_error: 'Bind error: An alias must be specified for the 1st expression (counting from 1) in result relation'
- name: is_true
  sql: |
    create table t (a bool);
    select a, a is true from t;
  stream_error: 'Bind error: An alias must be specified for the 2nd expression (counting from 1) in result relation'
- name: is_null with alias
  sql: |
    create table t (a int);
    select a is null as is_null from t;
  stream_plan: |-
    StreamMaterialize { columns: [is_null, t._row_id(hidden)], stream_key: [t._row_id], pk_columns: [t._row_id], pk_conflict: NoCheck }
    └─StreamProject { exprs: [IsNull(t.a) as $expr1, t._row_id] }
      └─StreamTableScan { table: t, columns: [t.a, t._row_id], stream_scan_type: ArrangementBackfill, stream_key: [t._row_id], pk: [_row_id], dist: UpstreamHashShard(t._row_id) }
- name: is_true with alias
  sql: |
    create table t (a bool);
    select a, a is true as is_true from t;
  stream_plan: |-
    StreamMaterialize { columns: [a, is_true, t._row_id(hidden)], stream_key: [t._row_id], pk_columns: [t._row_id], pk_conflict: NoCheck }
    └─StreamProject { exprs: [t.a, IsTrue(t.a) as $expr1, t._row_id] }
      └─StreamTableScan { table: t, columns: [t.a, t._row_id], stream_scan_type: ArrangementBackfill, stream_key: [t._row_id], pk: [_row_id], dist: UpstreamHashShard(t._row_id) }
- name: column name specified more than once
  sql: |
    create table t1 (a int);
    create table t2 (a int);
    select * from t1 join t2 on t1.a = t2.a;
  batch_plan: |-
    BatchExchange { order: [], dist: Single }
    └─BatchHashJoin { type: Inner, predicate: t1.a = t2.a, output: all }
      ├─BatchExchange { order: [], dist: HashShard(t1.a) }
      │ └─BatchScan { table: t1, columns: [t1.a], distribution: SomeShard }
      └─BatchExchange { order: [], dist: HashShard(t2.a) }
        └─BatchScan { table: t2, columns: [t2.a], distribution: SomeShard }
  stream_error: 'Invalid input syntax: column "a" specified more than once'
- name: column name specified more than once
  sql: |
    create table t1 (a int, b int);
    select * except (a), b from t1;
  batch_plan: |-
    BatchExchange { order: [], dist: Single }
    └─BatchProject { exprs: [t1.b, t1.b] }
      └─BatchScan { table: t1, columns: [t1.b], distribution: SomeShard }
  stream_error: 'Invalid input syntax: column "b" specified more than once'
- name: expression name specified more than once
  sql: |
    create table t (a int);
    select count(*), count(a) from t;
  batch_plan: |-
    BatchSimpleAgg { aggs: [sum0(count), sum0(count(t.a))] }
    └─BatchExchange { order: [], dist: Single }
      └─BatchSimpleAgg { aggs: [count, count(t.a)] }
        └─BatchScan { table: t, columns: [t.a], distribution: SomeShard }
  stream_error: 'Invalid input syntax: column "count" specified more than once'
- name: expression column name
  sql: |
    create table t (a int);
    select count(*), max(a) from t;
  stream_plan: |-
    StreamMaterialize { columns: [count, max], stream_key: [], pk_columns: [], pk_conflict: NoCheck }
    └─StreamProject { exprs: [sum0(count), max(max(t.a))] }
      └─StreamSimpleAgg { aggs: [sum0(count), max(max(t.a)), count] }
        └─StreamExchange { dist: Single }
          └─StreamHashAgg { group_key: [_vnode], aggs: [count, max(t.a)] }
            └─StreamProject { exprs: [t.a, t._row_id, Vnode(t._row_id) as _vnode] }
              └─StreamTableScan { table: t, columns: [t.a, t._row_id], stream_scan_type: ArrangementBackfill, stream_key: [t._row_id], pk: [_row_id], dist: UpstreamHashShard(t._row_id) }
